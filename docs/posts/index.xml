<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend NG</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Hello Friend NG</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 09 Aug 2021 13:52:36 +0800</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Skywalking 系列文章</title>
            <link>/posts/skywalking/</link>
            <pubDate>Mon, 09 Aug 2021 13:52:36 +0800</pubDate>
            
            <guid>/posts/skywalking/</guid>
            <description>底层接口简述 启动过程简述 各个 module 的 provider 简述 </description>
            <content type="html"><![CDATA[<h3 id="底层接口简述skywalking-0"><a href="../skywalking-0">底层接口简述</a></h3>
<h3 id="启动过程简述skywalking-1"><a href="../skywalking-1">启动过程简述</a></h3>
<h3 id="各个-module-的-provider-简述skywalking-2"><a href="../skywalking-2">各个 module 的 provider 简述</a></h3>
]]></content>
        </item>
        
        <item>
            <title>Skywalking-0 底层接口简述</title>
            <link>/posts/skywalking-0/</link>
            <pubDate>Mon, 09 Aug 2021 13:52:36 +0800</pubDate>
            
            <guid>/posts/skywalking-0/</guid>
            <description>简述 Service: 功能的具体实现; 空接口 ModuleServiceHolder: 管理某个模块实现的类  registerServiceImplementation(Class&amp;lt;? extends Service&amp;gt; serviceType, Service service) 注册 服务，（一个模块中，可能有多个实现） &amp;lt;T extends Service&amp;gt; T getService(Class&amp;lt;T&amp;gt; serviceType) 获取实现服务  ModuleProvider: 模块提供者管理，是 ModuleServiceHolder 的抽象实现  持有 ModuleDefine 和 ModuleManager 的引用 管理 Service 的 Map: Map&amp;lt;Class&amp;lt;? extends Service&amp;gt;, Service&amp;gt; services; 当执行 registerServiceImplementation 时，即往该 map 中添加记录 抽象方法：  Class&amp;lt;? extends ModuleDefine&amp;gt; module() 获取所属模块的 class ModuleConfig createConfigBeanIfAbsent()： 创建 模块配置 prepare()： 准备动作： In prepare stage, the moduleDefine should initialize things which are irrelative other modules.</description>
            <content type="html"><![CDATA[<p><img src="../skywalking/skywalking-module-diagram.png" alt="skywalking-module-diagram"></p>
<h2 id="简述">简述</h2>
<h4 id="service--功能的具体实现-空接口">Service:  功能的具体实现; 空接口</h4>
<h4 id="moduleserviceholder-管理某个模块实现的类">ModuleServiceHolder: 管理某个模块实现的类</h4>
<ul>
<li><code>registerServiceImplementation(Class&lt;? extends Service&gt; serviceType, Service service)</code> 注册 服务，（一个模块中，可能有多个实现）</li>
<li><code>&lt;T extends Service&gt; T getService(Class&lt;T&gt; serviceType)</code> 获取实现服务</li>
</ul>
<h4 id="moduleprovider-模块提供者管理是-moduleserviceholder-的抽象实现">ModuleProvider: 模块提供者管理，是 ModuleServiceHolder 的抽象实现</h4>
<ul>
<li>持有 <code>ModuleDefine</code> 和 <code>ModuleManager</code> 的引用</li>
<li>管理 Service 的 Map: <code>Map&lt;Class&lt;? extends Service&gt;, Service&gt; services</code>; 当执行 registerServiceImplementation 时，即往该 map 中添加记录</li>
<li>抽象方法：
<ul>
<li><code>Class&lt;? extends ModuleDefine&gt; module()</code> 获取所属模块的 class</li>
<li><code>ModuleConfig createConfigBeanIfAbsent()</code>： 创建 模块配置</li>
<li><code>prepare()</code>： 准备动作：  In prepare stage, the moduleDefine should initialize things which are irrelative other modules.</li>
<li><code>start()</code>： 开始动作：In start stage, the moduleDefine has been ready for interop.</li>
<li><code>notifyAfterCompleted()</code>：当所有模块都启动完成，作为回调通知： This callback executes after all modules start up successfully.</li>
<li><code>String[] requiredModules()</code>：  当前模块依赖其它模块的名称： moduleDefine names which does this moduleDefine require?</li>
<li><code>String name()</code>： provider 的名称</li>
</ul>
</li>
</ul>
<h4 id="moduleproviderholder-模块提供者的管理-接口类型">ModuleProviderHolder: 模块提供者的管理， 接口类型</h4>
<ul>
<li><code>ModuleServiceHolder provider()</code>： 获取模块提供者</li>
</ul>
<h4 id="moduledefine-模块的定义是-moduleproviderholder-的抽象实现">ModuleDefine: 模块的定义，是 ModuleProviderHolder 的抽象实现，</h4>
<ul>
<li>持有 ModuleProvier 的引用 <code>private ModuleProvider loadedProvider = null</code></li>
<li><code>prepare(ModuleManager moduleManager, ApplicationConfiguration.ModuleConfiguration configuration, ServiceLoader&lt;ModuleProvider&gt; moduleProviderLoader):</code>
module 的 prepare 阶段， 找到所有的 providers 并且让他们执行 prepare</li>
<li>抽象方法：
<ul>
<li><code>Class[] services()</code>： 该模块提供的 Service；</li>
</ul>
</li>
</ul>
<h4 id="moduledefineholder-模块定义的管理-接口类型">ModuleDefineHolder: 模块定义的管理， 接口类型</h4>
<ul>
<li><code>boolean has(String moduleName)</code>： 是否有某个模块</li>
<li><code>ModuleProviderHolder find(String moduleName)</code>： 通过模块名获取模块管理者</li>
</ul>
<h4 id="modulemanager-模块管理者的具体实现">ModuleManager: 模块管理者的具体实现</h4>
<ul>
<li>持有所有模块的引用： <code>final Map&lt;String, ModuleDefine&gt; loadedModules</code></li>
<li>变量 isInPrepareStage： 是否在 prepare 的阶段</li>
<li><code>init(ApplicationConfiguration applicationConfiguration)</code>: 接收 ApplicationConfiguration 配置进行初始化：
<ul>
<li>a.</li>
</ul>
</li>
</ul>
<h4 id="moduleconfig-表示配置管理类-抽象类">ModuleConfig: 表示配置管理类， 抽象类</h4>
<h4 id="applicationconfiguration-模块化配置类-模块管理器启动查找-等都会基于此配置类运行">ApplicationConfiguration: 模块化配置类， 模块管理器启动，查找 等都会基于此配置类运行</h4>
<ul>
<li>持有 ModuleConfig 引用： <code>HashMap&lt;String, ModuleConfiguration&gt; modules</code></li>
<li>内部类
<ul>
<li>ModuleConfiguration: 模块配置类,持有模块提供者的配置引用： <code>HashMap&lt;String, ProviderConfiguration&gt; providers</code></li>
<li>ProviderConfiguration: 模块提供者的配置，持有 Properties 对象的引用，表示该 provider 的配置，最终都转化为 Properties 对象</li>
</ul>
</li>
</ul>
<h4 id="bootstrapflow-启动流程">BootstrapFlow: 启动流程</h4>
<h2 id="简述总结">简述总结</h2>
<p>skywalking 分模块管理，有多个模块，默认启动 23 个，每个 module 都有一个 provider， 每个 provider 可以注册多个 Service, 而 Service 可以理解为 具体功能的实现； 与 Provider 一起工作；</p>
]]></content>
        </item>
        
        <item>
            <title>Skywalking-1 服务端启动流程简述</title>
            <link>/posts/skywalking-1/</link>
            <pubDate>Mon, 09 Aug 2021 13:52:36 +0800</pubDate>
            
            <guid>/posts/skywalking-1/</guid>
            <description>服务端启动流程 启动入口  apm-dist apm-dist-es7 中表示发布时使用哪个启动类，对应启动的为 oap-server/server-starter oap-server/server-starter-es7, 实际最终都是以 opa-server/server-bootstrap 模块启动： OAPServerBootstrap#start()  启动方法点： OAPServerBootstrap.start()  获取启动模式： 通过系统属性 -Dmode= 来获取，并且设置启动模式  init: 做所有初始化的事情，然后程序退出 no-init: 正常启动，不需要做存储层初始化（比如 es 存储的话就创建索引，索引模板等； mysql 的话就创建表结构等）   构造配置加载类， ApplicationConfigLoader， 构造模块管理器 ModuleManager, 在这个地方， ApplicationConfigLoader 实现于 ConfigLoader, 其中 T 的具体类型为 ApplicationConfiguration， 其中定义 load 方法，表示如何加载配置文件得到 T，   2.1 使用 configLoader.load() 加载获取配置类 ApplicationConfiguration, 下面是具体的加载逻辑：  2.1.1 构造空的 ApplicationConfiguration 实例， 执行 loadConfig（configuration） 对该实例填充内容 2.1.2 读取 applicaition.yml 文件， 使用 yml 工具转换成 Map&amp;lt;String, Map&amp;lt;String, Object&amp;gt;&amp;gt; 对象， 其中， application.</description>
            <content type="html"><![CDATA[<h2 id="服务端启动流程">服务端启动流程</h2>
<h3 id="启动入口">启动入口</h3>
<ul>
<li>apm-dist apm-dist-es7 中表示发布时使用哪个启动类，对应启动的为 oap-server/server-starter  oap-server/server-starter-es7, 实际最终都是以 opa-server/server-bootstrap 模块启动： <code>OAPServerBootstrap#start()</code></li>
</ul>
<h3 id="启动方法点-oapserverbootstrapstart">启动方法点： <code>OAPServerBootstrap.start()</code></h3>
<ol>
<li>获取启动模式： 通过系统属性 <code>-Dmode=</code>   来获取，并且设置启动模式
<ul>
<li><code>init</code>: 做所有初始化的事情，然后程序退出</li>
<li><code>no-init</code>: 正常启动，不需要做存储层初始化（比如 es 存储的话就创建索引，索引模板等； mysql 的话就创建表结构等）</li>
</ul>
</li>
<li>构造配置加载类， ApplicationConfigLoader， 构造模块管理器 ModuleManager, 在这个地方， ApplicationConfigLoader 实现于 ConfigLoader<!-- raw HTML omitted --> , 其中 T 的具体类型为 ApplicationConfiguration， 其中定义 load 方法，表示如何加载配置文件得到 T，</li>
</ol>
<ul>
<li>2.1 使用 configLoader.load() 加载获取配置类 ApplicationConfiguration, 下面是具体的加载逻辑：
<ul>
<li>2.1.1 构造空的 ApplicationConfiguration 实例， 执行 <code>loadConfig（configuration）</code> 对该实例填充内容</li>
<li>2.1.2 读取 <code>applicaition.yml</code> 文件， 使用 yml 工具转换成 <code>Map&lt;String, Map&lt;String, Object&gt;&gt;</code> 对象， 其中， application.yml 文件也是按照模块进行定义的；</li>
<li>2.1.3 模块中有配置项为  <code>selector</code>: 表示此模块使用具体哪个来子功能来实现，比如 存储可以使用 h2, mysql, es/es7, 集群功能可以使用  nacos/zk/k8s 等
对每个模块的配置进行  selector 的加载， 具体是取 selector 值对应 key 的 配置， 非该 value 的 配置都会从 configuration 中移除，因为也是无用的
如果禁用某个模块，则将 selector 置为 &ldquo;-&quot;; 如果 selector 没有禁用，并且配置也找不到，则会抛错；会将无用的模块也移除</li>
<li>2.1.4 配置</li>
<li>2.1.5 执行 <code>overrideConfigBySystemEnv</code>，通过系统属性覆盖 module 和 provider 的配置</li>
<li>2.1.6 默认启动时最终定位 23 个 module</li>
</ul>
</li>
<li>2.2 然后调用模块管理器 manager 的 init 方法使用加载获取到的 ApplicationConfiguration 进行初始化
<ul>
<li>2.2.1 通过 java 原生的 <code>service SPI</code> 机制获取 所有的 ModuleDefine 和 ModuleProvider</li>
<li>2.2.2 遍历存在于 <code>ApplicationConfiguration</code> 中的 module， 并执行 module 的 prepare 方法，一下 prepare 方法逻辑：
<ul>
<li>2.2.2.1 遍历 moduleProvider, 找到所属该 module 的 provider</li>
<li>2.2.2.2 设置 moduleDefine 的 loadedProvider 为上一步骤找出的 provider （每个 module 对应一个 对象， 每个对象都会有一个 provider），
每个 provider 都会有 moduleManager(全局一个) 的引用， 并且持有自身所属 module 的引用</li>
<li>2.2.2.3 从 applicationConfiguration 中复制属性到 loadedProvider 中；</li>
<li>2.2.2.4 loadedProvider 也执行自己的 prepare() 方法， 每个 provider 都有自己的实现，具体得看每一个 provider 的逻辑</li>
</ul>
</li>
<li>2.2.3 moduleDefine 的 prepare 方法执行完后就放入 loadModules 这个 map 中， key 为 module,name(), value 为 module 本身</li>
<li>2.2.4 整个的 <code>prepare</code> 阶段完成， <code>isInPrepareStage</code> 也置为 false</li>
<li>2.2.5 通过加载的 <code>loadedModules</code> 构造 BootstrapFlow， 执行 bootstrapFlow 的 <code>start（moduleManager）</code> ，然后执行通知
<ul>
<li>2.2.5.1 构造 BootstrapFlow
<ul>
<li>2.2.5.1.1 持有所有加载的 modules 的引用，构造空的 ModuleProvider 的 LinkedList: startupSequence</li>
<li>2.2.5.1.2 遍历 modules， 拿到所有的 providers，provider 中的方法 requiredModules 定义了它所依赖的模块，
对这所有的模块和 providers 进行处理 （4层循环处理），最终按照依赖顺序放进 startupSequence 的 链表中</li>
</ul>
</li>
<li>2.2.5.2 <code>BootstrapFlow</code> 的 <code>start</code> 执行, 遍历 <code>startupSequence</code> 链表，依次执行每个 provider 的 start() 方法</li>
<li>2.2.5.3 <code>BootstrapFlow</code> 的 <code>notifyAfterComplete</code>， 遍历 <code>startupSequence</code> 链表，依次执行每个 provider 的 notifyAfterCompleted() 方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="启动流程综述">启动流程综述</h3>
<ol>
<li>通过配置文件和 SPI 机制加载 module 及 moduleProvider</li>
<li>构造 moduleManager 执行初始化，对 module 的 provider 执行 <code>prepare</code>() 方法</li>
<li>构造 bootstrapFlow 然后捋清 provider 的依赖形成一个具有先后顺序链表，
<ul>
<li>a. 先遍历链表依次执行每个 provider 的 <code>start</code>() 方法，</li>
<li>b. 最后再遍历链表依次执行每个 provider 的 <code>notifyAfterCompleted</code>() 方法</li>
</ul>
</li>
</ol>
<blockquote>
<p>后面依次分析各个 provider 的逻辑</p>
</blockquote>
<pre><code>默认配置下，startupSequence 的 provider 链表：
NoneConfigurationProvider       ConfigurationModule
GraphQLQueryProvider            QueryModule
NoneTelemetryProvider           TelemetryModule
CoreModuleProvider              CoreModule
SharingServerModuleProvider     SharingServerModule
ProfileModuleProvider           ProfileModule
AnalyzerModuleProvider          AnalyzerModule
MeshReceiverProvider            MeshReceiverModule
AlarmModuleProvider             AlarmModule
ConfigurationDiscoveryProvider  ConfigurationDiscoveryModule
RegisterModuleProvider          RegisterModule
BrowserModuleProvider           BrowserModule
ClusterModuleNacosProvider      ClusterModule
CLRModuleProvider               CLRModule
EventAnalyzerModuleProvider     EventAnalyzerModule
EventModuleProvider             EventModule
MysqlStorageProvider            StorageModule
TraceModuleProvider             TraceModule
EnvoyMetricReceiverProvider     EnvoyMetricReceiverModule
JVMModuleProvider               JVMModule
MeterReceiverProvider           MeterReceiverModule
LogAnalyzerModuleProvider       LogAnalyzerModule
LogModuleProvider               LogModule
</code></pre><p><img src="../skywalking/skywalking-2.png" alt="provider sequence"></p>
]]></content>
        </item>
        
        <item>
            <title>Skywalking-2 服务端各 moduleProvider 启动简述</title>
            <link>/posts/skywalking-2/</link>
            <pubDate>Mon, 09 Aug 2021 13:52:36 +0800</pubDate>
            
            <guid>/posts/skywalking-2/</guid>
            <description>各 Module 的 Provider 流程  以下针对所有的 provider 依次展开分析
 module sequence: NoneConfigurationProvider(ConfigurationModule) -&amp;gt; GraphQLQueryProvider(QueryModule) -&amp;gt; NoneTelemetryProvider(TelemetryModule) -&amp;gt; CoreModuleProvider(CoreModule) -&amp;gt; SharingServerModuleProvider(SharingServerModule) -&amp;gt; ProfileModuleProvider(ProfileModule) -&amp;gt; AnalyzerModuleProvider(AnalyzerModule) -&amp;gt; MeshReceiverProvider(MeshReceiverModule) -&amp;gt; AlarmModuleProvider(AlarmModule) -&amp;gt; ConfigurationDiscoveryProvider(ConfigurationDiscoveryModule) -&amp;gt; RegisterModuleProvider(RegisterModule) -&amp;gt; BrowserModuleProvider(BrowserModule) -&amp;gt; ClusterModuleNacosProvider(ClusterModule) -&amp;gt; CLRModuleProvider(CLRModule) -&amp;gt; EventAnalyzerModuleProvider(EventAnalyzerModule) -&amp;gt; EventModuleProvider(EventModule) -&amp;gt; MysqlStorageProvider(StorageModule) -&amp;gt; TraceModuleProvider(TraceModule) -&amp;gt; EnvoyMetricReceiverProvider(EnvoyMetricReceiverModule) -&amp;gt; JVMModuleProvider(JVMModule) -&amp;gt; MeterReceiverProvider(MeterReceiverModule) -&amp;gt; LogAnalyzerModuleProvider(LogAnalyzerModule) -&amp;gt; LogModuleProvider(LogModule)  NoneConfigurationProvider: prepare: // do nothing
start: // do nothing
notifyAfterCompleted: // do nothing</description>
            <content type="html"><![CDATA[<h2 id="各-module-的-provider-流程">各 Module 的 Provider 流程</h2>
<blockquote>
<p>以下针对所有的 provider 依次展开分析</p>
</blockquote>
<pre><code>module sequence:
NoneConfigurationProvider(ConfigurationModule) -&gt; GraphQLQueryProvider(QueryModule) -&gt; NoneTelemetryProvider(TelemetryModule)
 -&gt; CoreModuleProvider(CoreModule) -&gt; SharingServerModuleProvider(SharingServerModule) -&gt; ProfileModuleProvider(ProfileModule)
  -&gt; AnalyzerModuleProvider(AnalyzerModule) -&gt; MeshReceiverProvider(MeshReceiverModule) -&gt; AlarmModuleProvider(AlarmModule)
   -&gt; ConfigurationDiscoveryProvider(ConfigurationDiscoveryModule) -&gt; RegisterModuleProvider(RegisterModule)
    -&gt; BrowserModuleProvider(BrowserModule) -&gt; ClusterModuleNacosProvider(ClusterModule) -&gt; CLRModuleProvider(CLRModule)
     -&gt; EventAnalyzerModuleProvider(EventAnalyzerModule) -&gt; EventModuleProvider(EventModule) -&gt; MysqlStorageProvider(StorageModule)
       -&gt; TraceModuleProvider(TraceModule) -&gt; EnvoyMetricReceiverProvider(EnvoyMetricReceiverModule) -&gt; JVMModuleProvider(JVMModule)
        -&gt; MeterReceiverProvider(MeterReceiverModule) -&gt; LogAnalyzerModuleProvider(LogAnalyzerModule) -&gt; LogModuleProvider(LogModule)
</code></pre><hr>
<h3 id="noneconfigurationprovider">NoneConfigurationProvider:</h3>
<h4 id="prepare">prepare:</h4>
<p>// do nothing</p>
<h4 id="start">start:</h4>
<p>// do nothing</p>
<h4 id="notifyaftercompleted">notifyAfterCompleted:</h4>
<p>// do nothing</p>
<hr>
<h3 id="graphqlqueryprovider-对界面提供查询的模块">GraphQLQueryProvider: 对界面提供查询的模块</h3>
<h4 id="prepare-1">prepare:</h4>
<p>读取 graphqls 文件， 构造 graphQL 等配置</p>
<h4 id="start-1">start:</h4>
<p>使用 jetty 提供服务，暴露 graphQL 查询功能</p>
<h4 id="notifyaftercompleted-1">notifyAfterCompleted:</h4>
<p>do nothing</p>
<hr>
<h3 id="nonetelemetryprovider">NoneTelemetryProvider:</h3>
<p>//todo</p>
<hr>
<h3 id="coremoduleprovider-核心模块">CoreModuleProvider: 核心模块</h3>
<h4 id="prepare-2">prepare:</h4>
<ol>
<li>根据 core 模块的配置文件，设置是否激活额外的模型列（让用户更容易看懂 sw 的数据，当前数据都是经过处理的存储到存储层） <code>isActiveExtraModelColumns</code></li>
<li>创建 <code>EndpointNameGrouping</code> (干嘛的还没看)</li>
<li>注册服务 <code>NamingControl</code>, 该服务主要用类做名称控制
<blockquote>
<p>NamingControl provides the service to make the names of service, instance and endpoint
following the rules or * patterns,  including length control, grouping, etc.</p>
</blockquote>
</li>
<li>构造 <code>endpointNameGroupingRuleWatcher</code>, 主要是接收配置变化，实时更新规则</li>
<li>构造类型为 <code>AnnotationScan</code> 的 scopeScan, 该对象保存 <code>AnnotationListenerCache</code> 链表，主要用来做通知; 然后添加一个类型为
<code>DefaultScopeDefine</code> 下的 listener, 执行 scan 扫描： 扫描添加了  <code>ScopeDeclaration</code> 注解的类并执行类加载， 然后做 <code>complete</code> 通知
<ul>
<li>a. <code>AnnotationListenerCache</code> 持有一个 <code>AnnotationListener</code> 的对象，以及匹配上条件的 Class 的 list 列表</li>
<li>b. scan 这个方法扫描所有 <code>org.apache.skywalking</code> 包的类， 然后做加载， 匹配，又用到了反射，耗时比较长</li>
<li>c. complete 最终就是对每个 listener 做 notify 通知动作， 在这个逻辑里，是在 <code>DefaultScopeDefine</code> 中添加 scope， <code>addNewScope()</code></li>
<li>d. <code>ScopeDeclaration</code> 注解
<pre><code> * ScopeDeclaration includes
 * 1.Source entity used in OAL script, such as Service as a Scope could be used like this in the OAL script.
 * service_resp_time = from(Service.latency).longAvg();
 * 2. Manual source such as {@link Segment}
 * 3. None stream entity like {@link ProfileTaskRecord}.
 * NOTICE, in OAL script, `disable` is for stream, rather than source, it doesn't require this annotation.
</code></pre></li>
<li>e. <code>DefaultScopeDefine</code> 的 Listener 是一个内部类， <code>addNewScope（ScopeDeclaration , Class ）</code>  的逻辑：(注解， 以及加了该注解的类)
<ol>
<li>获取 注解的 id 和 name 做校验，</li>
<li>获取 class 上的 <code>ScopeDefaultColumn.VirtualColumnDefinition</code> 注解，如果存在就构造 ScopeDefaultColumn 对象并添加到 list 数组中，
<ul>
<li><code>ScopeDefaultColumn</code>
<blockquote>
<p>Define the default columns of source scope. These columns pass down into the
persistent entity(OAL metrics entity) automatically. 主要是定义 scope 默认的 字段，一路传下去到持久层                                                                                                                                           &gt;</p>
</blockquote>
</li>
<li><code>ScopeDefaultColumn.VirtualColumnDefinition</code></li>
<li><code>ScopeDefaultColumn.DefinedByField</code>
<blockquote>
<p><code>requireDynamicActive</code>: Dynamic active means this column is only activated through core setting explicitly.
表示是否只能有 core 的设置才能激活， 默认为 false, 表示可以由其它方式激活
** 如果它的值为 true 并且 <code>ACTIVE_EXTRA_MODEL_COLUMN</code> 配置为 false,  该字段不会被写入到 持久层 **</p>
</blockquote>
</li>
</ul>
</li>
<li>获取 class 的所有字段，如果该字段添加了 DefinedByField 注解，根据判断，看是否添加到 scopeDefaultColumns 列表中</li>
<li>获取注解的 catalog 放入到 map 中</li>
<li>默认情况下游 37 个 scope</li>
</ol>
</li>
</ul>
</li>
<li>注册 <code>MeterSystem</code> 类型的服务， （用于指标计算的系统）
<blockquote>
<p>MeterSystem provides the API way to create MetricsStreamProcessor rather than manual analysis metrics or OAL script. 提供 api 的方式去创建 指标处理器而不是手动分析指标或 oal 脚本</p>
</blockquote>
<ul>
<li>获取所有添加了  <code>MeterFunction</code> 注解的类，并且是实现了 <code>AcceptableValue</code> 的类， 添加到 <code>functionRegister</code> map 中</li>
<li>MeterFunction 注解：
<blockquote>
<p>Meter function indicate this class is used in SkyWalking meter system. The meter system accepts data from any number
based metrics ecosystem, typically like Prometheus and Micrometer Application Monitoring
大意就是说： 该注解指出当前类适用于 sw 中的 计算测量系统， 接收类似于 prometheus， 应用遥测监控等 指标系统的 number 数据</p>
</blockquote>
</li>
</ul>
</li>
<li>再次构造 AnnotationScan 类 oalDisable ，注册 <code>DisableRegister</code> 和 <code>SingleDisableScanListener</code> 主要用来处理 oal 相关的：
// todo:  主要涉及到 <code>MultipleDisable</code>, Disable 注解； <code>oal</code> 脚本由内存编译 <code>memory compile</code> ，内存中给那些脚本生成的类加上 注解</li>
<li>根据配置构造 <code>grpcServer</code> 或带 ssl 的 grpcServer, 以及配置相应参数，然后进行 grpcServer 的初始化</li>
<li>根据配置构造 <code>jettyServer</code>，并进行 jettyServer 的初始化</li>
<li>注册一些列的服务：</li>
</ol>
<pre><code>       ConfigService
       DownSamplingConfigService
       GRPCHandlerRegister
       JettyHandlerRegister
       IComponentLibraryCatalogService
       SourceReceiver  -&gt; SourceReceiverImpl
       WorkerInstancesService
       RemoteSenderService
       ModelCreator -&gt; storageModels(StorageModels)
       IModelManager -&gt; storageModels(StorageModels)
       ModelManipulator -&gt; storageModels(StorageModels)
       NetworkAddressAliasCache
       // query service
       TopologyQueryService
       MetricsMetadataQueryService
       MetricsQueryService
       TraceQueryService
       BrowserLogQueryService
       LogQueryService
       MetadataQueryService
       AggregationQueryService
       AlarmQueryService
       TopNRecordsQueryService
       EventQueryService
       // profile service
       ProfileTaskMutationService
       ProfileTaskQueryService
       ProfileTaskCache
       CommandService
       // oal engine loader service
       OALEngineLoaderService
       annotationScan 注册 StreamAnnotationListener 
       RemoteClientManager
       UITemplateManagementService
</code></pre><ol start="11">
<li>构造 <code>ApdexThresholdConfig</code></li>
</ol>
<h4 id="start-2">start</h4>
<ol>
<li>(<code>GRPCServer</code>) grpcServer 添加 <code>RemoteServiceHandler</code>， 添加 <code>HealthCheckServiceHandler</code></li>
<li><code>remoteClientManager</code> 启动</li>
<li>禁掉 <code>oal</code> 中 disable 的</li>
<li><code>SourceReceiverImpl</code> 执行 scan()</li>
<li><code>annotationScan</code> 执行 scan()</li>
<li>如果当前节点是 <code>mixed</code> 或 <code>aggregator</code> 角色的，则启动 <code>RemoteInstance</code> 的 grpc, 并找到 clusterModule 中 provider 的 <code>ClusterRegister</code> 类型的服务，注册此 grpc</li>
<li><code>OAPNodeChecker</code> 设置角色</li>
<li>从 moduleManager 中找到 ConfigurationModule 里 provider 下 <code>DynamicConfigurationService</code> 类型的服务，注册 <code>apdexThresholdConfig</code> 和 <code>endpointNameGroupingRuleWatcher</code> 类型的配置监听</li>
</ol>
<h4 id="notifyaftercompleted-2">notifyAfterCompleted</h4>
<ol>
<li>启动 grpcServer ，即上面的 GRPCServer</li>
<li>启动 jettyServer</li>
<li><code>PersistenceTimer</code> 启动：</li>
<li><code>CacheUpdateTimer.INSTANCE</code> 启动</li>
<li>通过 <code>ui-initialized-templates</code> 目录文件构造 <code>UITemplateInitializer</code>，重点为： <code>ManagementStreamProcessor.getInstance().in(uiTemplate)</code>;</li>
</ol>
<hr>
<h3 id="sharingservermoduleprovider">SharingServerModuleProvider:</h3>
<h4 id="prepare-3">prepare:</h4>
<ol>
<li>如果自己模块中配置的 restPort &gt; 0 则初始化一个 jettyServer， 并使用 jettyServer 构造 <code>JettyHandlerRegisterImpl</code> 注册到 serviceImplementation</li>
<li>反之，构造空的 <code>ReceiverJettyHandlerRegister</code>， 注册到 serviceImplementation, 两个的 Service 均为 JettyHandlerRegister</li>
<li>如果自己模块中的 <code>grpcPort != 0</code> 则根据配置初始化一个 grpcServer, 并使用 grpcServer 构造 GRPCHandlerRegisterImpl 注册到 serviceImplementation</li>
<li>反之，构造空的 <code>ReceiverGRPCHandlerRegister</code> 并注册到 serviceImplementation, 两个的 Service 均为 GRPCHandlerRegister</li>
</ol>
<h4 id="start-3">start:</h4>
<ol>
<li>若 grpcServer 不为空则添加 HealthCheckServiceHandler 类型的 handler</li>
<li>若 receiverGRPCHandlerRegister 不为空则从 coreModule 中获取 GRPCHandlerRegister 设置到自己里面</li>
<li>若 receiverJettyHandlerRegister 不为空则从 coreModule 中获取 JettyHandlerRegister 设置到自己里面</li>
</ol>
<h4 id="notifyaftercompleted-3">notifyAfterCompleted:</h4>
<ol>
<li>若 grpcServer 不为空 则启动该 server</li>
<li>若 jettyServer 不为空，则启动该 server</li>
</ol>
<hr>
<h3 id="profilemoduleprovider">ProfileModuleProvider:</h3>
<h4 id="prepare-4">prepare:</h4>
<p>do nothing</p>
<h4 id="start-4">start:</h4>
<ol>
<li>获取 sharingServerModule 中的 grpcHandlerRegister,</li>
<li>给该 grpc 添加两个 handler: <code>ProfileTaskServiceHandler</code>， <code>ProfileTaskServiceHandlerCompat</code></li>
</ol>
<h4 id="notifyaftercompleted-4">notifyAfterCompleted:</h4>
<p>do nothing</p>
<hr>
<h3 id="analyzermoduleprovider">AnalyzerModuleProvider:</h3>
<h4 id="prepare-5">prepare:</h4>
<ol>
<li>构造
<ul>
<li>DBLatencyThresholdsAndWatcher</li>
<li>UninstrumentedGatewaysConfig</li>
<li>TraceSampleRateWatcher</li>
<li>TraceLatencyThresholdsAndWatcher</li>
</ul>
</li>
<li>根据以上对象设置该模块的 config</li>
<li>注册服务 <code>SegmentParserServiceImpl</code> <code>MeterProcessService</code></li>
</ol>
<h4 id="start-5">start:</h4>
<ol>
<li>从 coreModule 中获取 OALEngineLoaderService 并执行加载； 此地方就是做 oal 的初始化加载相关 （非常重要）</li>
<li>从 configurationModule 中获取 DynamicConfigurationService 类型服务，添加一下监听器，他们都是 抽象类 <code>ConfigChangeWatcher</code> 的具体实现
<pre><code>ConfigChangeWatcher represents a watcher implementor, it will be called when the target value changed.
thresholds： DBLatencyThresholdsAndWatcher, 主要是 db 慢查询相关的
uninstrumentedGatewaysConfig： 
traceSampleRateWatcher：
traceLatencyThresholdsAndWatcher：
</code></pre><p>相当于这些配置支持动态配置，当配置变化， 动态配置服务会通知并做出相应变化</p>
</li>
<li><code>segmentParserService</code> 设置监听器管理： 主要是添加了以下监听器：
<ul>
<li><code>MultiScopesAnalysisListener</code></li>
<li><code>NetworkAddressAliasMappingListener</code></li>
<li><code>SegmentAnalysisListener</code></li>
</ul>
</li>
<li><code>MeterProcessService</code> 开始工作： <code>Management all of the meter builders</code>.  根据配置创建了指标转换器数组， 再必要时创建 遥测数据处理器</li>
</ol>
<h4 id="notifyaftercompleted-5">notifyAfterCompleted:</h4>
<p>do nothing</p>
<hr>
<h3 id="meshreceiverprovider-服务网格相关">MeshReceiverProvider: 服务网格相关</h3>
<p>// todo</p>
<hr>
<h3 id="alarmmoduleprovider-主要用来做监控告警的">AlarmModuleProvider: 主要用来做监控告警的</h3>
<p>// todo</p>
<hr>
<h3 id="configurationdiscoveryprovider-配置中心发现功能">ConfigurationDiscoveryProvider: 配置中心发现功能</h3>
<h4 id="prepare-6">prepare:</h4>
<ol>
<li>构造 <code>AgentConfigurationsWatcher</code>：</li>
</ol>
<blockquote>
<p>AgentConfigurationsWatcher used to handle dynamic configuration changes.
ConfigChangeWatcher: represents a watcher implementor, it will be called when the target value changed.
主要是当配置有变更时被回调</p>
</blockquote>
<h4 id="start-6">start:</h4>
<ol>
<li>从 configurationModule 获取 <code>DynamicConfigurationService</code>， 设置 <code>agentConfigurationWatcher</code></li>
<li>从 sharingServerModule 获取 <code>GRPCHandlerRegister</code>, 添加 handler: <code>ConfigurationDiscoveryServiceHandler</code>
主要是处理从 agent 过来的获取动态配置的 grpc request ，如果有相关配置就会返回到 agent 端</li>
</ol>
<h4 id="notifyaftercompleted-6">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="registermoduleprovider">RegisterModuleProvider：</h3>
<h4 id="prepare-7">prepare:</h4>
<p>do nothing</p>
<h4 id="start-7">start:</h4>
<ol>
<li>从 sharingServerModule 中获取 GrpcHandlerRegister, 添加两个处理器
ManagementServiceHandler： 报告实例属性配置： reportInstanceProperties
<ol>
<li>从 coreModule 中获取 SourceReceiver 服务并持有该引用</li>
<li>从 coreModule 中获取 NamingControl 服务并持有该引用
ManagementServiceHandlerCompat: 持有上面的 ManagementServiceHandler 引用</li>
</ol>
</li>
<li>从 sharingServerModule 中获取 JettyHandlerRegister, 添加两个处理器
<ul>
<li><code>ManagementServiceReportPropertiesHandler</code>:
<ol>
<li>同样的， 从 coreModule 中持有 <code>sourceReceiver</code> 和 <code>NamingControl</code> 服务引用</li>
<li>JettyHandler 继承自 HttpServlet， 此 handler 中实现了 doPost 方法
<code>pathSpec()</code> 方法为其关注处理的路径 /v3/management/reportProperties</li>
</ol>
</li>
<li><code>ManagementServiceKeepAliveHandler</code>：
<ol>
<li>同上面的 handler 差不多， 关注的路径是： /v3/management/keepAlive</li>
</ol>
</li>
<li>从以上分析可以得出，此处也是比较核心的逻辑， grpc 和 jetty， <code>sourceReceiver</code> 后面会与 <code>dispatcher</code> 紧密相连</li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-7">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="browsermoduleprovider">BrowserModuleProvider：</h3>
<p>// 看起来和 浏览器的性能及错误日志处理有关， todo</p>
<hr>
<h3 id="clustermodulenacosprovider">ClusterModuleNacosProvider:</h3>
<blockquote>
<p>属于 clusterModule 的一个 provider, 主要用来作 skywalking 的集群管理,当 clusterModule 中 selector 为 nacos 时，使用的 provider 则为此 nacosProvider</p>
</blockquote>
<h4 id="prepare-8">prepare:</h4>
<ol>
<li>解析配置， 创建 Nacos 的 <code>NamingService</code></li>
<li>使用该 <code>NamingService</code> 构造 <code>NacosCoordinator</code>, 实现了 <code>ClusterRegister</code> 和 <code>ClusterNodeQuery</code>
<ul>
<li><code>ClusterRegister</code>: 主要用来做注册远程实例到注册中心</li>
<li><code>ClusterNodeQuery</code>: 主要是从注册中心查询 sw 集群节点</li>
</ul>
</li>
</ol>
<h4 id="start-8">start:</h4>
<p>do nothing.</p>
<h4 id="notifyaftercompleted-8">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="clrmoduleprovider">CLRModuleProvider:</h3>
<p>// 好像是和 .net 有关的，暂不做分析， todo</p>
<hr>
<h3 id="eventanalyzermoduleprovider">EventAnalyzerModuleProvider:</h3>
<h4 id="prepare-9">prepare:</h4>
<ul>
<li>注册服务 <code>EventAnalyzerServiceImpl</code></li>
</ul>
<h4 id="start-9">start:</h4>
<ul>
<li>给上面的服务添加 <code>EventRecordAnalyzerListener.Factory</code>, 该 factory 持有 coreModule 中的 NamingControl 服务的引用</li>
<li>EventRecordAnalyzerListener forwards the event data to the persistence layer with the query required conditions.</li>
</ul>
<h4 id="notifyaftercompleted-9">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="eventmoduleprovider">EventModuleProvider:</h3>
<h4 id="prepare-10">prepare:</h4>
<p>do nothing.</p>
<h4 id="start-10">start:</h4>
<ul>
<li>获取 sharingServerModule 中的 <code>grpcHandlerRegister</code>, 添加 <code>EventGrpcServiceHandler</code> 处理器</li>
<li><code>EventGrpcServiceHandler</code>：
<ol>
<li>从 TelemetryModule 中获取 MetricsCreator 服务</li>
<li>持有从 EventAnalyzerModule 中获取的 EventAnalyzerService 服务的引用</li>
<li>通过 metricsCreator 创建 counter 和 histogramMetric， 其实就是不同类型的指标创造器，在此处创建直方图和计数器
histogramMetric: event_in_latency
counter:  event_error_count</li>
</ol>
</li>
</ul>
<h4 id="notifyaftercompleted-10">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="mysqlstorageprovider">MysqlStorageProvider:</h3>
<blockquote>
<p>属于 storageModule 的一个 provider， 主要用来作数据持久层，当 selector 为 mysql 时， 使用的则是此 provider; 文档说明，
此 provider 应当作为第二选（第一选是 elasticsearch）
它来自于 H2StorageProvider， 在生产使用时，需要再三考虑；此模块并不是专门只为 mysql ，而是 作为 JDBC 使用，也可用作其它存储
比如： Apache ShardingSphere &amp; TiDB</p>
</blockquote>
<hr>
<h3 id="storagemoduleelasticsearchprovider">StorageModuleElasticsearchProvider:</h3>
<blockquote>
<p>storage provider for ElasticSearch 6.</p>
</blockquote>
<h5 id="prepare-11">prepare:</h5>
<ol>
<li>注册 <code>StorageBuilderFactory.Default()</code> 服务.</li>
<li>通过配置构造 <code>esClient</code> 并持有其引用</li>
<li>使用上面的 esClient 构造以下服务并注册进 provider 中:
<ul>
<li><code>BatchProcessESDAO</code>: 服务类型为 <code>IBatchDAO</code>, 属于数据持久层的抽象，支持同步和异步模式.</li>
<li><code>StorageEsDAO</code>:</li>
<li><code>HistoryDeleteEsDAO</code>:</li>
<li><code>NetworkAddressAliasEsDAO</code>:</li>
<li><code>TopologyQueryEsDAO</code>:</li>
<li><code>MetricsQueryEsDAO</code>:</li>
<li><code>TraceQueryEsDAO</code>:</li>
<li><code>BrowserLogQueryEsDAO</code>:</li>
<li><code>MetadataQueryEsDAO</code>:</li>
<li><code>AggregationQueryEsDAO</code>:</li>
<li><code>AlarmQueryEsDAO</code>:</li>
<li><code>TopNRecordsQueryEsDAO</code>:</li>
<li><code>LogQueryEsDAO</code>:</li>
<li><code>ProfileTaskQueryEsDAO</code>:</li>
<li><code>ProfileTaskLogEsDAO</code>:</li>
<li><code>ProfileThreadSnapshotQueryEsDAO</code>:</li>
<li><code>UITemplateManagementEsDAO</code>:</li>
<li><code>ESEventQueryDAO</code>:</li>
</ul>
</li>
</ol>
<h4 id="start-11">start:</h4>
<ol>
<li>通过 coreModule 中的 metricCreator 服务创建 &ldquo;storage_elasticsearch&rdquo; gauge 类型的 HealthCheckMetrics
并注册到上面的 esClient 中</li>
<li>通过 esClient 构造 StorageEsInstaller 并添加到 coreModule 中 ModelCreator 服务的 modelListener 列表中去
<ul>
<li>StorageEsInstaller 是 抽象类 ModelInstaller 的 es 实现, 不同类型的数据库都有各自的实现</li>
<li>在 ModelInstaller 中的 whenCreating 方法中定义：
<ol>
<li>如果 启动模式 Mode 不为 &ldquo;no-init&rdquo;, 则创建表结构（初始化相关， es 的索引， mysql 的数据表）</li>
<li>如果启动模式 Mode 带有 &ldquo;no-init&rdquo;,表示不做初始化动作，并循环停顿 3s 检查表接口是否存在.</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-11">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="tracemoduleprovider">TraceModuleProvider:</h3>
<h4 id="prepare-12">prepare:</h4>
<p>do nothing.</p>
<h4 id="start-12">start:</h4>
<ol>
<li>从 sharingServerModule 模块中拿到 <code>GRPCHandlerRegister</code> 和 <code>JettyHandlerRegister</code></li>
<li>向 grpc 中添加 <code>TraceSegmentReportServiceHandler</code> 和 <code>TraceSegmentReportServiceHandlerCompat</code>
<ul>
<li><code>TraceSegmentReportServiceHandler</code>： 持有 moduleManager 和 <code>AnalyzerModule</code> 中的 <code>ISegmentParserService</code> 服务的引用</li>
</ul>
</li>
<li>从 telemetryModule 中拿到 <code>metricsCreator</code> 创建 &ldquo;<code>trace_in_latency</code>&rdquo; Histogram 和 &ldquo;<code>trace_analysis_error_count</code>&rdquo; 的 Counter 指标</li>
<li>向 jetty 中添加 <code>TraceSegmentReportListServletHandler</code> 和 <code>TraceSegmentReportSingleServletHandler</code>
<ul>
<li><code>TraceSegmentReportListServletHandler</code> 做的事情和 <code>TraceSegmentReportServiceHandler</code> 差不多</li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-12">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="envoymetricreceiverprovider">EnvoyMetricReceiverProvider:</h3>
<p>// 看着应该是 服务网格中相关的指标，咱不解析 todo</p>
<hr>
<h3 id="jvmmoduleprovider">JVMModuleProvider:</h3>
<h4 id="prepare-13">prepare:</h4>
<p>do nothing</p>
<h4 id="start-13">start:</h4>
<ol>
<li>从 coreModule 中拿到 OALEngineLoaderService 并加载 JVMOALDefine.INSTANCE 主要就是 加载关于 jvm 的 oal
<ul>
<li>&ldquo;<code>oal/java-agent.oal</code>&rdquo; 配置文件</li>
<li>另外 &ldquo;<code>org.apache.skywalking.oap.server.core.source</code>&rdquo; 包下</li>
</ul>
</li>
<li>拿到 sharingServerModule 中的 GRPCHandlerRegister 并向其中添加两个 handler:
<ul>
<li><code>JVMMetricReportServiceHandler</code></li>
<li><code>JVMMetricReportServiceHandlerCompat</code></li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-13">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="meterreceiverprovider">MeterReceiverProvider:</h3>
<h4 id="prepare-14">prepare:</h4>
<p>do nothing</p>
<h4 id="start-14">start:</h4>
<ol>
<li>拿到 analyzerModule 中的 IMeterProcessService 服务并持有该引用</li>
<li>拿到 sharingServerModule 中的 <code>GRPCHandlerRegister</code> 并向其中添加两个 handler:
<ul>
<li><code>MeterServiceHandler</code></li>
<li><code>MeterServiceHandlerCompat</code></li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-14">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="loganalyzermoduleprovider">LogAnalyzerModuleProvider:</h3>
<h4 id="prepare-注册服务-loganalyzerserviceimpl该服务">prepare: 注册服务 LogAnalyzerServiceImpl，该服务：</h4>
<ol>
<li>有一个 doAnalysis 方法，该方法中使用 moduleManager 和 moduleConfig 构造 LogAnalyzer 并执行分析
<blockquote>
<p>Analyze the collected log data, is the entry point for log analysis. 表示的是 日志分析的入口</p>
</blockquote>
</li>
<li>有个 addListenerfactory 方法，表示添加监听器， 在 doAnalysis 时，会分别调用所有 listener 的 parse 和 build 方法
<pre><code>`LogAnalysisListener`：LogAnalysisListener represents the callback when OAP does the log data analysis. 表示回调
  * build(): 分析处理的最后一步，典型的是将分析结果发到 source receiver
  * parse(): 从探针中分析原始数据
</code></pre></li>
</ol>
<h4 id="start-15">start:</h4>
<ol>
<li>拿到 analyzerModule 中的 <code>IMeterProcessService</code> 服务并持有该引用</li>
<li>拿到 sharingServerModule 中的 GRPCHandlerRegister 并向其中添加两个 handler:
<ul>
<li><code>MeterServiceHandler</code></li>
<li><code>MeterServiceHandlerCompat</code></li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-15">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h3 id="logmoduleprovider">LogModuleProvider:</h3>
<h4 id="prepare-15">prepare:</h4>
<p>do nothing</p>
<h4 id="start-16">start:</h4>
<ol>
<li>从 sharingServerModule 中拿到 grpc 和 jetty</li>
<li>向 grpc 中添加 LogReportServiceHandler 处理器，向 jetty 中添加 LogReportServiceRestHandler 处理器
<ul>
<li><code>LogReportServiceHandler</code>：采集日志数据
<ol>
<li>持有 moduleManager 引用和 LogAnalyzerModule 中的 ILogAnalyzerService 服务的应用</li>
<li>通过 MetricsCreator 创建 &ldquo;<code>log_in_latency</code>&rdquo; 的 Histogram 及 &ldquo;<code>log_analysis_error_count</code>&rdquo; 的 Counter 类型指标</li>
</ol>
</li>
<li><code>LogReportServiceRestHandler</code>： 和上面的处理器差不多</li>
</ul>
</li>
</ol>
<h4 id="notifyaftercompleted-16">notifyAfterCompleted:</h4>
<p>do nothing.</p>
<hr>
<h2 id="综述">综述</h2>
<ol>
<li>coreModule 中定义了核心的服务供后面的模块调用</li>
<li><code>grpcHandlerRegister</code> 和 <code>jettyHandlerRegister</code> 做着承上启下的作用，从头到尾都在添加 Handler 处理器，
那么，当数据进来时，不同的 handler 都会根据自己的逻辑对数据做处理
所以比较核心的就是要了解各个模块中的这些 Handler 做了些什么事情</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
