<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Hello Friend NG</title>
    <link>/tags/untagged/</link>
    <description>Recent content in untagged on Hello Friend NG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 09 Aug 2021 13:52:36 +0800</lastBuildDate><atom:link href="/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Skywalking</title>
      <link>/posts/skywalking/</link>
      <pubDate>Mon, 09 Aug 2021 13:52:36 +0800</pubDate>
      
      <guid>/posts/skywalking/</guid>
      <description>Service: 功能的具体实现 空 接口
ModuleServiceHolder: 管理某个模块实现的类 registerServiceImplementation(Class&amp;lt;? extends Service&amp;gt; serviceType, Service service): 注册 服务，（一个模块中，可能有多个实现） T getService(ClassserviceType)： 获取实现服务
ModuleProvider: 模块提供者管理，是 ModuleServiceHolder 的抽象实现 持有 ModuleDefine 和 ModuleManager 的引用 管理 Service 的 Map: Map&amp;lt;Class&amp;lt;? extends Service&amp;gt;, Service&amp;gt; services; 当执行 registerServiceImplementation 时，即往该 map 中添加记录
抽象方法： Class&amp;lt;? extends ModuleDefine&amp;gt; module()： 获取所属模块的 class ModuleConfig createConfigBeanIfAbsent()： 创建 模块配置 prepare()： 准备动作： In prepare stage, the moduleDefine should initialize things which are irrelative other modules. start()： 开始动作：In start stage, the moduleDefine has been ready for interop.</description>
    </item>
    
  </channel>
</rss>
